name: foodgram-ci-cd

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
  REGISTRY_PASS: ${{ secrets.DOCKER_PASSWORD }}
  HOST: ${{ secrets.HOST }}
  SSH_USER: ${{ secrets.USER }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}

jobs:
  backend_tests:
    name: "Backend: lint & tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: foodgram
          POSTGRES_USER: foodgram
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U foodgram -d foodgram"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: "Install dependencies"
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8==6.0.0
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: "Django migrate (CI DB)"
        env:
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: foodgram
          POSTGRES_USER: foodgram
          POSTGRES_PASSWORD: password
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          SECRET_KEY: test-secret
          DEBUG: "false"
          ALLOWED_HOSTS: localhost,127.0.0.1
          CSRF_TRUSTED_ORIGINS: http://localhost
        working-directory: backend
        run: |
          python manage.py migrate --noinput || echo "skip migrate (no django project?)"
          python manage.py check || true

      - name: "Lint (flake8)"
        run: python -m flake8 backend/

      - name: "Run tests (pytest if present)"
        env:
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: foodgram
          POSTGRES_USER: foodgram
          POSTGRES_PASSWORD: password
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          SECRET_KEY: test-secret
          DEBUG: "false"
        working-directory: backend
        run: |
          if [ -f pytest.ini ] || [ -f tox.ini ] || ls -1 tests* 2>/dev/null | grep -q .; then
            python -m pip install pytest
            pytest -q
          else
            echo "no tests found, skip"
          fi

      - name: "Notify Telegram (backend tests)"
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MSG="foodgram: backend tests finished with status: ${STATUS}"
          if [ -n "${TELEGRAM_TOKEN}" ] && [ -n "${TELEGRAM_TO}" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_TO}" -d text="${MSG}" >/dev/null || true
          fi

  frontend_tests:
    name: "Frontend: lint & tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Node"
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: "Install deps"
        working-directory: frontend
        run: npm ci --no-audit --no-fund

      - name: "Lint (eslint if present)"
        working-directory: frontend
        run: npx --yes eslint . || echo "eslint not configured, skip"

      - name: "Run tests (if present)"
        working-directory: frontend
        run: npm test --if-present -- --ci

      - name: "Build (sanity check)"
        working-directory: frontend
        run: npm run build

      - name: "Notify Telegram (frontend tests)"
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MSG="foodgram: frontend checks finished with status: ${STATUS}"
          if [ -n "${TELEGRAM_TOKEN}" ] && [ -n "${TELEGRAM_TO}" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_TO}" -d text="${MSG}" >/dev/null || true
          fi

  build_backend:
    name: "Build & push backend"
    needs: backend_tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}

      - name: "Build & push backend"
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY_USER }}/foodgram_backend:latest
            ${{ env.REGISTRY_USER }}/foodgram_backend:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build_frontend:
    name: "Build & push frontend"
    needs: frontend_tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}

      - name: "Prepare frontend Dockerfile"
        run: |
          cat > frontend/Dockerfile.ci <<'EOF'
          # build SPA
          FROM node:20-alpine AS build
          WORKDIR /app
          COPY frontend/package*.json ./
          RUN npm ci --no-audit --no-fund
          COPY frontend/ ./
          RUN npm run build

          # serve with nginx (standalone image)
          FROM nginx:1.25-alpine
          COPY --from=build /app/build /usr/share/nginx/html
          # simple health endpoint
          RUN printf "ok" > /usr/share/nginx/html/healthz
          HEALTHCHECK --interval=10s --timeout=3s --retries=10 \
            CMD wget -qO- http://127.0.0.1/healthz || exit 1
          EOF

      - name: "Build & push frontend"
        uses: docker/build-push-action@v6
        with:
          context: .
          file: frontend/Dockerfile.ci
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY_USER }}/foodgram_frontend:latest
            ${{ env.REGISTRY_USER }}/foodgram_frontend:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build_gateway:
    name: "Build & push gateway (nginx + built frontend)"
    needs: [build_backend, build_frontend]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}

      - name: "Prepare gateway Dockerfile"
        run: |
          mkdir -p infra
          cat > infra/Dockerfile.gateway <<'EOF'
          # 1) build frontend from repo
          FROM node:20-alpine AS front
          WORKDIR /app
          COPY frontend/package*.json ./
          RUN npm ci --no-audit --no-fund
          COPY frontend/ ./
          RUN npm run build

          # 2) nginx with config and built frontend
          FROM nginx:1.25-alpine
          COPY infra/nginx.conf /etc/nginx/conf.d/default.conf
          COPY --from=front /app/build /usr/share/nginx/html
          HEALTHCHECK --interval=10s --timeout=3s --retries=10 \
            CMD wget -qO- http://127.0.0.1/nginx-health || exit 1
          EOF

      - name: "Build & push gateway"
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/Dockerfile.gateway
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY_USER }}/foodgram_gateway:latest
            ${{ env.REGISTRY_USER }}/foodgram_gateway:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: "Notify Telegram (builds)"
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MSG="foodgram: images build&push finished with status: ${STATUS}"
          if [ -n "${TELEGRAM_TOKEN}" ] && [ -n "${TELEGRAM_TO}" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_TO}" -d text="${MSG}" >/dev/null || true
          fi

  deploy:
    name: "Deploy to server"
    needs: build_gateway
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Start ssh-agent and add key"
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
          ssh-passphrase: ${{ secrets.SSH_PASSPHRASE }}

      - name: "Ensure remote dir & copy compose file"
        env:
          SSH_USER: ${{ env.SSH_USER }}
          HOST: ${{ env.HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no "${SSH_USER}@${HOST}" "mkdir -p ~/foodgram"
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
            docker-compose.production.yml \
            "${SSH_USER}@${HOST}:~/foodgram/docker-compose.production.yml"

      - name: "Deploy via SSH"
        env:
          SSH_USER: ${{ env.SSH_USER }}
          HOST: ${{ env.HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no "${SSH_USER}@${HOST}" <<'EOF'
            set -Eeuo pipefail
            cd ~/foodgram
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d --remove-orphans

            # post-deploy tasks (idempotent)
            docker compose -f docker-compose.production.yml exec -T backend \
              python manage.py migrate --noinput || true
            docker compose -f docker-compose.production.yml exec -T backend \
              python manage.py collectstatic --noinput || true
            docker compose -f docker-compose.production.yml exec -T backend \
              python manage.py fill_ingredients_from_csv --path data/ingredients.csv || true

            # smoke-check nginx
            curl -fsS http://127.0.0.1/nginx-health >/dev/null || exit 1

            docker image prune -f >/dev/null 2>&1 || true
          EOF

      - name: "Notify Telegram (deploy)"
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MSG="foodgram: deploy finished with status: ${STATUS}"
          if [ -n "${TELEGRAM_TOKEN}" ] && [ -n "${TELEGRAM_TO}" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_TO}" -d text="${MSG}" >/dev/null || true
          fi
