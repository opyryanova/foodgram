name: foodgram-ci-cd

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
  REGISTRY_PASS: ${{ secrets.DOCKER_PASSWORD }}
  HOST: ${{ secrets.HOST }}
  SSH_USER: ${{ secrets.USER }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}

jobs:
  tests:
    name: Backend: lint & tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: foodgram
          POSTGRES_USER: foodgram
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U foodgram -d foodgram"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install deps
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0
          pip install -r requirements.txt
      - name: Lint
        run: python -m flake8 backend/
      - name: Migrate & test
        working-directory: backend
        env:
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: foodgram
          POSTGRES_USER: foodgram
          POSTGRES_PASSWORD: password
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          SECRET_KEY: test-secret
          DEBUG: "false"
        run: |
          python manage.py migrate --noinput
          python manage.py test -v 2

  build_backend:
    name: Build & push backend
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}
      - uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY_USER }}/foodgram_backend:latest
            ${{ env.REGISTRY_USER }}/foodgram_backend:sha-${{ github.sha }}

  build_gateway:
    name: Build & push gateway (nginx + built frontend)
    needs: build_backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}
      - name: Prepare Dockerfile.gateway
        run: |
          mkdir -p infra
          cat > infra/Dockerfile.gateway <<'EOF'
          FROM node:18-alpine AS build
          WORKDIR /app
          COPY frontend/package*.json ./
          RUN npm ci --no-audit --no-fund --legacy-peer-deps
          COPY frontend/ ./
          RUN npm run build

          FROM nginx:1.25-alpine
          COPY infra/nginx.conf /etc/nginx/conf.d/default.conf
          COPY --from=build /app/build /usr/share/nginx/html
          RUN printf "ok" > /usr/share/nginx/html/healthz
          HEALTHCHECK --interval=10s --timeout=3s --retries=10 \
            CMD wget -qO- http://127.0.0.1/healthz || exit 1
          EOF
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/Dockerfile.gateway
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY_USER }}/foodgram_gateway:latest
            ${{ env.REGISTRY_USER }}/foodgram_gateway:sha-${{ github.sha }}

  deploy:
    name: Deploy to server
    needs: build_gateway
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: appleboy/scp-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "infra/docker-compose.production.yml,infra/nginx.conf"
          target: "foodgram"
          overwrite: true
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -e
            cd ~/foodgram
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d --remove-orphans
            docker compose -f docker-compose.production.yml exec -T backend python manage.py migrate --noinput || true
            docker compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput || true
            docker compose -f docker-compose.production.yml exec -T backend python manage.py fill_ingredients_from_csv --path data/ingredients.csv || true

  notify:
    name: Telegram notify (success)
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: appleboy/telegram-action@master
        with:
          to: ${{ env.TELEGRAM_TO }}
          token: ${{ env.TELEGRAM_TOKEN }}
          message: "Foodgram: деплой успешно выполнен (commit ${{ github.sha }})."
