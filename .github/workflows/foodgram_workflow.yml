name: Foodgram CI/CD
on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0
      - name: Lint (non-blocking)
        continue-on-error: true
        run: python -m flake8 backend/

  build_and_push_backend:
    name: Build & Push Backend
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  build_and_push_frontend:
    name: Build & Push Frontend
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend
      - build_and_push_frontend
    steps:
      - name: SSH: prepare repo
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            if [ ! -d "/home/${{ secrets.USER }}/foodgram/.git" ]; then
              mkdir -p /home/${{ secrets.USER }}/foodgram
              cd /home/${{ secrets.USER }}
              git clone https://github.com/opyryanova/foodgram.git foodgram
            fi
            cd /home/${{ secrets.USER }}/foodgram
            sudo chown -R $USER:$USER /home/${{ secrets.USER }}/foodgram || true
            git config --global --add safe.directory /home/${{ secrets.USER }}/foodgram || true
            git fetch --all
            git reset --hard origin/main
            git clean -fd

      - name: SSH: deploy with docker-compose v1
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            cd /home/${{ secrets.USER }}/foodgram
            sudo sed -i 's/\r$//' docker-compose.production.yml || true
            sudo sed -i 's/\r$//' nginx.conf || true
            sudo docker-compose -f docker-compose.production.yml pull
            sudo docker-compose -f docker-compose.production.yml down
            sudo docker-compose -f docker-compose.production.yml up -d
            sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate --noinput
            sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py load_ingredients || \
            sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py fill_ingredients_from_csv --path data/ingredients.csv || true
            sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py import_tags || true

  notify:
    name: Telegram Notify
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Фудграм: деплой успешно выполнен"
