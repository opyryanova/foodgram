name: Foodgram CI/CD

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools  # Добавляем для pkg_resources
          pip install flake8==6.0.0 flake8-isort==6.1.1
          pip install -r backend/requirements.txt
      - name: Run flake8
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: python -m flake8 backend/

  build_and_push_backend:
    name: Build & Push Backend
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile
          push: true
          tags: pyryanova/foodgram_backend:latest

  build_and_push_frontend:
    name: Build & Push Frontend
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: pyryanova/foodgram_frontend:latest

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend
      - build_and_push_frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Copy files via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "infra/docker-compose.production.yml,infra/nginx.conf,data/ingredients.csv"
          target: "/home/${{ secrets.USER }}/foodgram"
          overwrite: true
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            mkdir -p /home/${{ secrets.USER }}/foodgram
            cd /home/${{ secrets.USER }}/foodgram
            sudo docker compose -f infra/docker-compose.production.yml pull
            sudo docker compose -f infra/docker-compose.production.yml down
            sudo docker compose -f infra/docker-compose.production.yml up -d
            sudo docker compose -f infra/docker-compose.production.yml exec -T backend python manage.py migrate --noinput
            sudo docker compose -f infra/docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            sudo docker compose -f infra/docker-compose.production.yml exec -T backend python manage.py load_ingredients --path data/ingredients.csv

  notify:
    name: Telegram Notification
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Foodgram: деплой успешно выполнен!"
