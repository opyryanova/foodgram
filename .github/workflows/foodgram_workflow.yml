name: Foodgram CI/CD
on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: "Install flake8"
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0
      - name: "Lint (non-blocking)"
        continue-on-error: true
        run: python -m flake8 backend/

  build_and_push_backend:
    name: "Build & Push Backend"
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  build_and_push_frontend:
    name: "Build & Push Frontend"
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push_backend, build_and_push_frontend]
    steps:
      - name: "SSH: prepare repo"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            BASE="/home/${{ secrets.USER }}/foodgram"
            REPO="https://github.com/opyryanova/foodgram.git"
            mkdir -p "$BASE"
            sudo chown -R $USER:$USER "$BASE" || true
            git config --global --add safe.directory "$BASE" || true
            if [ -d "$BASE/.git" ]; then
              cd "$BASE"
              git fetch --all
              git reset --hard origin/main
              git clean -fd
            else
              if [ -z "$(ls -A "$BASE" 2>/dev/null)" ]; then
                rm -rf "$BASE"
                git clone "$REPO" "$BASE"
              else
                cd "$BASE"
                git init
                if git remote get-url origin >/dev/null 2>&1; then
                  git remote set-url origin "$REPO"
                else
                  git remote add origin "$REPO"
                fi
                git fetch --depth=1 origin main
                git reset --hard origin/main
                git clean -fd
              fi
            fi

      - name: "SSH: ensure .env from secrets"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            cd /home/${{ secrets.USER }}/foodgram
            if [ -f ".env" ]; then
              echo ".env uzhe est, propuskaem"
            else
              : > .env
              echo "DB_ENGINE=django.db.backends.postgresql" >> .env
              echo "DB_NAME=${{ secrets.POSTGRES_DB }}" >> .env
              echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
              echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
              echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
              echo "DB_HOST=db" >> .env
              echo "DB_PORT=5432" >> .env
              echo "" >> .env
              echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
              echo "DEBUG=False" >> .env
              echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
              echo "CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}" >> .env
              echo "" >> .env
              echo "TIME_ZONE=Europe/Moscow" >> .env
              echo "APPEND_SLASH=True" >> .env
              echo "USE_X_FORWARDED_PROTO=True" >> .env
              echo "USE_X_FORWARDED_HOST=True" >> .env
              echo "SECURE_SSL_REDIRECT=True" >> .env
              echo "SESSION_COOKIE_SECURE=True" >> .env
              echo "CSRF_COOKIE_SECURE=True" >> .env
              echo "SESSION_COOKIE_SAMESITE=Lax" >> .env
              echo "CSRF_COOKIE_SAMESITE=Lax" >> .env
              echo "DISABLE_BROWSABLE_API=True" >> .env
              echo "DATA_UPLOAD_MAX_MEMORY_SIZE=26214400" >> .env
              chmod 600 .env
            fi

      - name: "SSH: deploy with docker compose v2"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            cd /home/${{ secrets.USER }}/foodgram
            sudo sed -i 's/\r$//' docker-compose.production.yml || true
            sudo sed -i 's/\r$//' nginx.conf || true
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py migrate --noinput
            sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py load_ingredients || true
            sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py fill_ingredients_from_csv --path data/ingredients.csv || true
            sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py import_tags || true

  notify:
    name: Telegram Notification
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Foodgram: деплой успешно выполнен!"
