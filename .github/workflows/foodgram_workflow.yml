  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push_backend, build_and_push_frontend]
    steps:
      - name: "SSH: prepare repo"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            BASE="/home/${{ secrets.USER }}/foodgram"
            REPO="https://github.com/opyryanova/foodgram.git"
            mkdir -p "$BASE"
            sudo chown -R $USER:$USER "$BASE" || true
            git config --global --add safe.directory "$BASE" || true
            if [ -d "$BASE/.git" ]; then
              cd "$BASE"
              git fetch --all
              git reset --hard origin/main
              git clean -fd
            else
              rm -rf "$BASE"
              git clone "$REPO" "$BASE"
            fi

      - name: "SSH: ensure infra/.env from secrets"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            cd /home/${{ secrets.USER }}/foodgram
            mkdir -p infra
            if [ -f "infra/.env" ]; then
              echo "infra/.env уже есть, пропускаю"
            else
              {
                echo "DB_ENGINE=django.db.backends.postgresql"
                echo "DB_NAME=${{ secrets.POSTGRES_DB }}"
                echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}"
                echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}"
                echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
                echo "DB_HOST=db"
                echo "DB_PORT=5432"
                echo
                echo "SECRET_KEY=${{ secrets.SECRET_KEY }}"
                echo "DEBUG=False"
                echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}"
                echo "CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}"
                echo
                echo "TIME_ZONE=Europe/Moscow"
                echo "APPEND_SLASH=True"
                echo "USE_X_FORWARDED_PROTO=True"
                echo "USE_X_FORWARDED_HOST=True"
                echo "SECURE_SSL_REDIRECT=True"
                echo "SESSION_COOKIE_SECURE=True"
                echo "CSRF_COOKIE_SECURE=True"
                echo "SESSION_COOKIE_SAMESITE=Lax"
                echo "CSRF_COOKIE_SAMESITE=Lax"
                echo "DISABLE_BROWSABLE_API=True"
                echo "DATA_UPLOAD_MAX_MEMORY_SIZE=26214400"
              } > infra/.env
              chmod 600 infra/.env
            fi

      - name: "SSH: deploy with docker compose (infra)"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            cd /home/${{ secrets.USER }}/foodgram

            sudo sed -i 's/\r$//' infra/docker-compose.production.yml || true
            sudo sed -i 's/\r$//' infra/nginx.conf || true

            sudo systemctl disable --now nginx apache2 2>/dev/null || true

            ids=$(sudo docker ps -q --filter publish=80)
            [ -n "$ids" ] && sudo docker stop $ids || true

            sudo docker compose -p infra -f infra/docker-compose.production.yml down --remove-orphans || true
            # На всякий случай погасим возможный корневой compose (чтобы точно освободить 80)
            if [ -f docker-compose.production.yml ]; then
              sudo docker compose -p infra -f docker-compose.production.yml down --remove-orphans || true
            fi

            sudo docker compose -p infra -f infra/docker-compose.production.yml pull
            sudo docker compose -p infra -f infra/docker-compose.production.yml up -d --remove-orphans

            sudo docker compose -p infra -f infra/docker-compose.production.yml exec -T backend python manage.py migrate --noinput
            sudo docker compose -p infra -f infra/docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            sudo docker compose -p infra -f infra/docker-compose.production.yml exec -T backend python manage.py load_ingredients || true
            sudo docker compose -p infra -f infra/docker-compose.production.yml exec -T backend python manage.py fill_ingredients_from_csv --path data/ingredients.csv || true
            sudo docker compose -p infra -f infra/docker-compose.production.yml exec -T backend python manage.py import_tags || true
