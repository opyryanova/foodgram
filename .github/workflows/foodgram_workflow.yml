name: foodgram-ci-cd

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

env:
  REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
  REGISTRY_PASS: ${{ secrets.DOCKER_PASSWORD }}
  HOST: ${{ secrets.HOST }}
  SSH_USER: ${{ secrets.USER }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}

jobs:
  tests:
    name: Run backend tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: foodgram
          POSTGRES_USER: foodgram
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U foodgram -d foodgram"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Prepare DB and migrate
        env:
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: foodgram
          POSTGRES_USER: foodgram
          POSTGRES_PASSWORD: password
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          SECRET_KEY: test-secret
          DEBUG: "false"
          ALLOWED_HOSTS: localhost,127.0.0.1
          CSRF_TRUSTED_ORIGINS: http://localhost
        working-directory: backend
        run: |
          python manage.py migrate --noinput || echo "skip migrate (no django project?)"

      - name: Run tests (pytest if present)
        env:
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: foodgram
          POSTGRES_USER: foodgram
          POSTGRES_PASSWORD: password
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          SECRET_KEY: test-secret
          DEBUG: "false"
        working-directory: backend
        run: |
          if [ -f pytest.ini ] || [ -f tox.ini ] || ls -1 tests* 2>/dev/null | grep -q .; then
            python -m pip install pytest
            pytest -q
          else
            echo "no tests found, skip"
          fi

      - name: Notify Telegram (tests)
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MSG="foodgram: tests finished with status: ${STATUS}"
          if [ -n "${TELEGRAM_TOKEN}" ] && [ -n "${TELEGRAM_TO}" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_TO}" -d text="${MSG}" >/dev/null || true
          fi

  build_and_push:
    name: Build and push images
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            pyryanova/foodgram_backend:latest

      - name: Prepare gateway Dockerfile (build frontend + nginx)
        run: |
          mkdir -p infra
          cat > infra/Dockerfile.gateway <<'EOF'
          # 1) build frontend
          FROM node:20-alpine AS front
          WORKDIR /app
          COPY frontend/package*.json ./
          RUN npm ci --no-audit --no-fund
          COPY frontend/ ./
          RUN npm run build

          # 2) nginx with config and built frontend
          FROM nginx:1.25-alpine
          # nginx config from repo (mounted in compose too, but keep in image as fallback)
          COPY infra/nginx.conf /etc/nginx/conf.d/default.conf
          # built SPA
          COPY --from=front /app/build /usr/share/nginx/html
          # basic healthcheck
          HEALTHCHECK --interval=10s --timeout=3s --retries=10 \
            CMD wget -qO- http://127.0.0.1/healthz || exit 1
          EOF

      - name: Build & push gateway (nginx + built frontend)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/Dockerfile.gateway
          push: true
          platforms: linux/amd64
          tags: |
            pyryanova/foodgram_gateway:latest

      - name: Notify Telegram (build)
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MSG="foodgram: images build&push finished with status: ${STATUS}"
          if [ -n "${TELEGRAM_TOKEN}" ] && [ -n "${TELEGRAM_TO}" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_TO}" -d text="${MSG}" >/dev/null || true
          fi

  deploy:
    name: Deploy to server
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
          ssh-passphrase: ${{ secrets.SSH_PASSPHRASE }}

      - name: Copy compose file to server
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
            docker-compose.production.yml \
            "${{ env.SSH_USER }}@${{ env.HOST }}:~/foodgram/docker-compose.production.yml"

      - name: Deploy via SSH
        env:
          SSH_USER: ${{ env.SSH_USER }}
          HOST: ${{ env.HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no "${SSH_USER}@${HOST}" <<'EOF'
            set -e
            mkdir -p ~/foodgram
            cd ~/foodgram
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d
            docker image prune -f
          EOF

      - name: Notify Telegram (deploy)
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MSG="foodgram: deploy finished with status: ${STATUS}"
          if [ -n "${TELEGRAM_TOKEN}" ] && [ -n "${TELEGRAM_TO}" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_TO}" -d text="${MSG}" >/dev/null || true
          fi
