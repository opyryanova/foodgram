services:
  db:
    image: postgres:13-alpine
    container_name: foodgram-db
    environment:
      POSTGRES_DB: ${DB_NAME:-foodgram}
      POSTGRES_USER: ${POSTGRES_USER:-foodgram}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-foodgram}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20

  backend:
    container_name: foodgram-back
    build:
      context: ../backend
      dockerfile: Dockerfile
    env_file:
      - ../backend/.env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - static_data:/app/static
      - media_data:/app/media
    expose:
      - "8000"
    command: >
      sh -c "
      python manage.py collectstatic --noinput &&
      python manage.py migrate --noinput &&
      gunicorn --bind 0.0.0.0:8000 foodgram.wsgi
      "

  nginx:
    image: nginx:1.25.4-alpine
    container_name: foodgram-proxy
    depends_on:
      - backend
    ports:
      - "80:80"
    volumes:
      # наш конфиг
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # статика/медиа, которые бэкенд складывает в тома
      - static_data:/static:ro
      - media_data:/media:ro
      # фронтовый прод-билд (после npm run build)
      - ../frontend/build:/usr/share/nginx/html:ro

volumes:
  pg_data:
  static_data:
  media_data:
